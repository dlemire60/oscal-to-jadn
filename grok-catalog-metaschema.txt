Trying to grok the Catalog metaschema. Below is the top level structure 
(vastly simplifying their syntax). This model defines assemblies for Catalog, 
Group, and Control. Part, Parameter, and Control-related constructs are 
imported from control-common metaschema. Metadata, back-matter, and several 
"utility", constructs are imported from the metadata metaschema. At first blush,
Constraints are hard to understand.


<import href="oscal_control-common_metaschema.xml"/>

//****************************************************************************//
//**********  structures from the Control Common metaschema ******************//
//****************************************************************************//

<define-assembly>"part"
    <define-flag>"id" (Token, because intended to be human-readable)
    <define-flag>"name" (token)
    <define-flag>"ns" (URI -- optional namespace for the part)
    <define-flag>"class" (token -- provides sub-type or category)
    <model>
        <define-field>"title (markup-line)
        <assembly>"props" (an array of property)
        <define-field>"prose" (markup-multiline)
        <assembly>"parts" (array of part)
        <assembly>"link" (an array of links)
    </model>
    <contraint>(an "allowed values" constraint)
</define-assembly>


<define-assembly>"parameter"
    <define-flag>"id" (Token, because intended to be human-readable)
    <define-flag>"class" (token -- provides sub-type or category)
    <define-flag>"depends-on" (token -- deprecated)
    <model>
        <assembly>"props" (an array of property)
        <assembly>"link" (an array of links)
        <define-field>"label" (markup-line)
        <define-field>"usage" (markup-multiline)
        <assembly>"constraints" (array of parameter-constraint)
        <assembly>"guidelines" (array of parameter-guideline)
        <choice>
            <field>"values" (array of parameter-value)
            <assembly>"select" (parameter-selection)
        </choice>
        <field>"remarks"
    </model>
    <contraint>(a couple of "allowed values" constraints, and an expected target)
</define-assembly>


<define-assembly>"parameter-constraint"
    <model>
        <define-field>"description" (markup-multiline)
        <define-assembly>"tests" (array of test)
            <model>
                <define-field>"expression" (string)
                <field>"remarks"
            </model>
        </define-assembly>
    </model>
</define-assembly>


<define-assembly>"parameter-guideline"
    <model>
        <define-field>"prose" (markup-multiline)
    </model>
</define-assembly>


<define-field>"parameter-value"  (no additional information with this)


<define-assembly>"parameter-selection"
    <define-flag>"how-many" (token)
        <constraint>
            <allowed-values>
                <enum>"one"
                <enum>"one-or-more"
            </allowed-values>
        </constraint>
    <define-flag>
    <model>
        <define-field>"choice" (array of markup-line)
    </model>
<define-assembly>


<define-flag>"control-id" (token)


<define-assembly>"include-all"  (what does this construct actually do??????)




<import href="oscal_metadata_metaschema.xml"/>

//****************************************************************************//
//**************  structures from the Catalog metaschema *********************//
//****************************************************************************//

<define-assembly>"catalog"
    <define-flag>"uuid"  (with a bunch of properties that I guess are for the tooling, don't show in JSON schema)
    <model>
        <assembly>"metadata" (imported from common metadata Metaschema)
        <assembly>"parameter" (an array of parameters)
        <assembly>"control" (an array of controls)
        <assembly>"group" (an array of groups)
        <assembly>"back-matter"
    </model>
    <contraint>(a couple of "allowed values" constraints, and six Index definitions)
</define-assembly>

<define-assembly>"group"
    <define-flag>"id" (this one is a Token, because "assigned and managed externally by humans.")
    <define-flag>"class" (another Token)
    <model>
        <assembly>"parameter" (an array of parameters)
        <define-field>"title"
        <assembly>"parameter" (an array of parameters)
        <assembly>"property" (an array of properties)
        <assembly>"link" (an array of links)
        <assembly>"part" (an array of parts)
        <choice>
            <assembly>"group" (an array of groups)
            <assembly>"control" (an array of controls)
    </model>
    <contraint>(a couple of "allowed values" constraints)
</define-assembly>

<define-assembly>"control"
    <define-flag>"id" (this one is a Token, because externally-managed)
    <define-flag>"class"
    <model>
        <define-field>"title"
        <assembly>"parameter" (an array of parameters)
        <assembly>"property" (an array of properties)
        <assembly>"link" (an array of links)
        <assembly>"part" (an array of parts)
        <assembly>"control" (an array of controls)
    </model>  
    <contraint>(a large number of "allowed values" constraints, an index definition, several "expected values")
