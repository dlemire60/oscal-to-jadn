Trying to grok the Component metaschema. Below is the top level structure 
(vastly simplifying their syntax). This model defines assemblies for {{fill in}}.
 Part, Parameter, and Control-related constructs are 
imported from control-common metaschema. Metadata, back-matter, and several 
"utility", constructs are imported from the metadata metaschema. At first blush,
Constraints are hard to understand.


<import href="oscal_metadata_metaschema.xml"/>

//****************************************************************************//
//*************  structures from the Metadata metaschema *********************//
//****************************************************************************//

<define-assembly>"metadata"  (complex structure, common to all OSCAL layers)
    <model>
        <field>title (markup-line)
        <field>published
        <field>last-modified
        <field>version
        <field>oscal-version
        <define-assembly>revisions
            <model>
                <array-of>
                    <field>title (markup-line)
                    <field>published
                    <field>last-modified
                    <field>version
                    <field>oscal-version
                    <assembly>props ArrayOf(property)
                    <assembly>links ArrayOf(link)
                    <field>remarks
                </array-of>
            </model>
        </define-assembly>
        <field>document-ids ArrayOf(document-id)
        <assembly>props ArrayOf(property)
        <assembly>links ArrayOf(link)
        <define-assembly>role ArrayOf(roles)
            <define-flag>id (token)
            <model>
                <field>title (markup-line)
                <field>short-name
                <field>description (markup-multiline)
                <assembly>props ArrayOf(property)
                <assembly>links ArrayOf(link)
                <field>remarks
            </model>
        </define-assembly>
        <define-assembly>locations ArrayOf(location)
            <flag>uuid
            <model>
                <field>title (markup-line)
                <assembly>address
                <field>email-addresses ArrayOf(email-address)
                <field>telephone-numbers ArrayOf(telephone-number)
                <field>urls ArrayOf(url)
                <field>props ArrayOf(property)
                <field>links ArrayOf(link)
                <field>remarks
            <model>
        </define-assembly>
        <define-assembly>parties  ArrayOf(party)
            <flag>uuid
            <flag>type
            <model>
                <field>name
                <field>short-name
                <field>external-ids ArrayOf(external-id)
                    <flag>scheme (uri)
                <assembly>props ArrayOf(property)
                <assembly>links ArrayOf(link)
                <field>email-addresses ArrayOf(email-address)
                <field>telephone-numbers ArrayOf(telephone-number)
                <choice>
                    <assembly>addresses ArrayOf(address)
                    <field>location-uuids ArrayOf(location-uuid)
                </choice>
                <field>member-of-organizations ArrayOf(uuid)
                <field>remarks
            </model>
        </define-assembly>
        <assembly>responsible-parties ArrayOf(responsible-party)
        <assembly>actions  ArrayOf(action)
        <field>remarks
    </model>
</define-assembly> {metadata}

// yes, they really to define both a 
// field and a flag with the same name
<define-flag>location-uuid (uuid)
<define-field>location-uuid (uuid)

<define-field>party-uuid (uuid)
<define-field>role-id (token)

<define-assembly>"back-matter"  (complex structure, common to all OSCAL layers)
    <model>
        <define-assembly>resources ArrayOf(resource)
            <flag>uuid (uuid)
            <model>
                <field>title (markup-line)
                <field>description (markup-multiline)
                <assembly>props ArrayOf(property)
                <field>document-ids ArrayOf(document-id)
                <define-assembly>citation
                    <model>
                        <field>text (markup-line)
                        <assembly>props ArrayOf(property)
                        <assembly>links ArrayOf(link)
                    </model>
                </define-assembly>
                <define-assembly>rlinks ArrayOf(rlink)
                    <flag>href (uri-reference)
                    <flag>media-type
                    <model>
                        <field>hashes ArrayOf(hash)
                    </model>
                </define-assembly>
                <field>base64 (base64Binary)
                <flag>filename (token)
                <flag>media-type
                <field>remarks
            </model>
        </define-assembly>
    </model>
</define-assembly> {back-matter}

<define-assembly>property
    <flag>name (token)
    <flag>uuid (uuid)
    <flag>ns (uri)
    <flag>value (string)
    <flag>class (token)
    <flag>group (token)
    <model>
        <field>remarks
    </model>
</define-assembly> {property}

<define-assembly>link
    <flag>href (uri-reference)
    <flag> rel (token)
    <flag>media-type
    <flag>resource-fragment (string)
    <model>
        <field>text (markup-line)
    </model>
</define-assembly> {link}


<define-assembly>"responsible-party"
    <flag>role-id (token)
    <model>
        <field>party-uuids ArrayOf(party-uuid)
        <assembly>props ArrayOf(property)
        <assembly>links ArrayOf(link)
        <field>remarks
    </model>
</define-assembly> {}"responsible-party"}

<define-assembly>"action"
    <flag>uuid (uuid)
    <flag>date (dateTime-with-timezone)
    <flag>type (token)
    <flag>system (uri)
    <model>
        <assembly>props ArrayOf(property)
        <assembly>links ArrayOf(link)
        <assembly>responsible-parties ArrayOf(responsible-party)
        <field>remarks
    </model>
</define-assembly> {}"action"}

<define-assembly>"responsible-role"
    <flag>role-id (token)
    <model>
        <assembly>props ArrayOf(property)
        <assembly>links ArrayOf(link)
        <field>party-uuids ArrayOf(party-uuid)
        <field>remarks
    </model>
</define-assembly> {}"responsible-role"}


// need to do some interpretation on the hash type
// there are a set of patterns in the constraints
// for the length of the different hash values
<define-field>"hash"
    <flag>algorithm (string)
        <enumeration> (get values from metaschema file)
</define-field>"hash"

<flag>"media-type" (string)

<define-field>"remarks" (markup-multiline)


// the following are labeled "local constructs"

<define-field>"published" (dateTime-with-timezone)

<define-field>"last-modified" (dateTime-with-timezone)

<define-field>"version" (string?)

<define-field>"oscal-version" (string?)

<define-field>"telephone-number" (string?)
    <define-flag>"type"
        <enumeration>
            "home"
            "office"
            "mobile"
            (others allowed)
        </enumeration>
    </define-flag>"type"
</define-field> {"telephone-number"}

<define-assembly>"address"
    <flag>type (location-type)
    <model>
        <field>addr-lines   ArrayOf(addr-line)
        <field>city (string?)
        <field>state (string?)
        <field>postal-code (string?)
        <field>country  (string pattern "[A-Z]{2}")
    </model>
</define-assembly> {"address"}

<define-field>"addr-line" (string?)

<define-flag>"location-type" (token)
    <enumeration>
        "home"
        "work"
        (others allowed)
    </enumeration>
</define-flag> {"location-type"}

<define-field>"document-id"
    <flag>scheme (uri)
        <enumeration>
            "http://www.doi.org"
            (others allowed)
        </enumeration>
</define-field> {"document-id"}

<import href="oscal_control-common_metaschema.xml"/>

//****************************************************************************//
//**********  structures from the Control Common metaschema ******************//
//****************************************************************************//

<define-assembly>"part"
    <define-flag>"id" (Token, because intended to be human-readable)
    <define-flag>"name" (token)
    <define-flag>"ns" (URI -- optional namespace for the part)
    <define-flag>"class" (token -- provides sub-type or category)
    <model>
        <define-field>"title (markup-line)
        <assembly>"props" (an array of property)
        <define-field>"prose" (markup-multiline)
        <assembly>"parts" (array of part)
        <assembly>"link" (an array of links)
    </model>
    <contraint>(an "allowed values" constraint)
</define-assembly> {"part"}


<define-assembly>"parameter"
    <define-flag>"id" (Token, because intended to be human-readable)
    <define-flag>"class" (token -- provides sub-type or category)
    <define-flag>"depends-on" (token -- deprecated)
    <model>
        <assembly>"props" (an array of property)
        <assembly>"link" (an array of links)
        <define-field>"label" (markup-line)
        <define-field>"usage" (markup-multiline)
        <assembly>"constraints" (array of parameter-constraint)
        <assembly>"guidelines" (array of parameter-guideline)
        <choice>
            <field>"values" (array of parameter-value)
            <assembly>"select" (parameter-selection)
        </choice>
        <field>"remarks"
    </model>
    <contraint>(a couple of "allowed values" constraints, and an expected target)
</define-assembly> {"parameter"}


<define-assembly>"parameter-constraint"
    <model>
        <define-field>"description" (markup-multiline)
        <define-assembly>"tests" (array of test)
            <model>
                <define-field>"expression" (string)
                <field>"remarks"
            </model>
        </define-assembly>
    </model>
</define-assembly> {"parameter-constraint"}


<define-assembly>"parameter-guideline"
    <model>
        <define-field>"prose" (markup-multiline)
    </model>
</define-assembly> {"parameter-guideline"}


<define-field>"parameter-value"  (no additional information with this)


<define-assembly>"parameter-selection"
    <define-flag>"how-many" (token)
        <constraint>
            <allowed-values>
                <enum>"one"
                <enum>"one-or-more"
            </allowed-values>
        </constraint>
    <define-flag>
    <model>
        <define-field>"choice" (array of markup-line)
    </model>
<define-assembly> {"parameter-selection"}


<define-flag>"control-id" (token)


<define-assembly>"include-all"  (what does this construct actually do??????)

//***********************************************************************//
//**********  structures from the Component metaschema ******************//
//***********************************************************************//


<define-assembly>"component-definition" // Component Definition: A collection of component descriptions, which may optionally be grouped by capability.
    <define-flag>uuid : uuid            // Component Definition Universally Unique Identifier: Provides a globally unique means to identify a given component definition instance.
    <model>
        <assembly>metadata
        <assembly>import-component-definitions : ArrayOf(import-component-definition)
        <assembly>components : ArrayOf(defined-component)
        <assembly>capabilities : ArrayOf(capability)
        <assembly>back-matter
    </model>
    <constraint>Since multiple component entries can be provided, each component must have a unique uuid.
    <constraint>A given component must not be referenced more than once within the same capability.
</define-assembly> {"component-definition"}




<define-assembly>"import-component-definition"  // Import Component Definition: Loads a component definition from another resource.
    <define-flag>href : uri-reference           // Hyperlink Reference: A link to a resource that defines a set of components and/or capabilities to import into this collection.
</define-assembly> {"import=component-definition"}


<define-assembly>"defined-component"    // Component: A defined component that can be part of an implemented system.
    <define-flag>uuid : uuid            // Component Identifier: Provides a globally unique means to identify a given component.
    <flag>type : defined-component-type
    <model>
        <define-field>title : markup-line               // Component Title: A human readable name for the component.
        <define-field>description : multiline-markup    // CComponent Description: A description of the component, including information about its function.
        <define-field>purpose : markup-line             // Purpose: A summary of the technological or business purpose of the component.
        <assembly>props : ArrayOf(property)
        <assembly>links : ArrayOf(link)
        <assembly>responsible-roles : ArrayOf(responsible-role)
        <assembly>protocols : ArrayOf(protocol)         // Used for service components to define the protocols supported by the service.
        <assembly>control-implementations : ArrayOf(control-implementation)
        <field>remarks : string
    </model>

// TO-DO:  need to work out how to apply the various constraints on this type in JADN-speak

</define-assembly> {"defined-component"}




<define-flag>"defined-component-type" : enumerated  // Component Type: A category describing the purpose of the component.
                                                    // Additional values allowed
    1   interconnection // A connection to something outside this system.
    2   software        // Any software, operating system, or firmware.
    3   hardware        // A physical device.
    4   service         // A service that may provide APIs.
    5   policy          // An enforceable policy.
    6   physical        // A tangible asset used to provide physical protections or countermeasures.
    7   process-procedure   // A list of steps or actions to take to achieve some end result.
    8   plan            // An applicable plan.    
    9   guidance        // Any guideline or recommendation.
    10  standard        // Any organizational or industry standard.
    11   validation     // An external assessment performed on some other component, that has been validated by a third-party.
</define-flag>



<define-assembly>"capability"       // Capability: A grouping of other components and/or capabilities.
    <define-flag>uuid : uuid        // Capability Identifier: Provides a globally unique means to identify a given capability.
    <define-flag>name : string      // Capability Name: The capability's human-readable name.
    <model>
        <define-field>description : multiline-markup  // Capability Description: A summary of the capability.
        <assembly>props : ArrayOf(property)
        <assembly>links : ArrayOf(link)
        <assembly>incorporates-components : ArrayOf(incorporates-component)
        <assembly>control-implementations : ArrayOf(control-implementation)
        <field>remarks : string
    </model>
    <constraint>A given component must not be referenced more than once within the same capability.
</define-assembly> {"capability"}


<define-assembly>"incorporates-component"   // Incorporates Component: The collection of components comprising this capability.
    <define-flag>component-uuid : uuid      // Component Reference: A machine-oriented identifier reference to a component
    <model>
        <define-field>description : multiline-markup  // Component Description: A description of the component, including information about its function.
    </model>
</define-assembly> {"incorporates-component"}


<define-assembly>"control-implementation"   // Control Implementation Set:  Defines how the component or capability supports a set of controls.
    <define-flag>uuid : uuid              // Control Implementation Set Identifier: Provides a means to identify a set of control implementations that are supported by a given component or capability.
    <define-flag>source : uri-reference   // Source Resource Reference: A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.
    <model>
        <define-field>description : multiline-markup  // Control Implementation Description: A description of how the specified set of controls are implemented for the containing component or capability.
        <assembly>props : ArrayOf(property)
        <assembly>links : ArrayOf(link)
        <assembly>set-parameters : ArrayOf(set-parameter)
        <assembly>implemented-requirements : ArrayOf(implemented-requirement)
    </model>
    <constraint>Since multiple set-parameter entries can be provided, each parameter must be set only once.
    <remarks>
        <p>Use of <code>set-parameter</code> in this context, sets the parameter for all controls referenced by any <code>implemented-requirement</code> contained in this context. Any <code>set-parameter</code> defined in a child context will override this value. If not overridden by a child, this value applies in the child context.</p>
    </remarks>
</define-assembly> {"control-implementation"}


<define-assembly> "implemented-requirement"     // Control Implementation:  Describes how the containing component or capability implements an individual control.
    <define-flag>uuid : uuid                 // Control Implementation Identifier
    <flag>control-id : control-id
    <model>
        <define-field>description : multiline-markup  // Control Implementation Description: A suggestion from the supplier (e.g., component vendor or author) for how the specified control may be implemented if the containing component or capability is instantiated in a system security plan.
        <assembly>props : ArrayOf(property)
        <assembly>links : ArrayOf(link)
        <assembly>set-parameters : ArrayOf(set-parameter)
        <assembly>responsible-roles : ArrayOf(responsible-role)
        <assembly>statements : ArrayOf(statement)
        <constraint>Since multiple set-parameter entries can be provided, each parameter must be set only once.
        <constraint>Since responsible-role associates multiple party-uuid entries with a single role-id, each role-id must be referenced only once.
        <constraint>Since statement entries can be referenced using the statement's statement-id, each statement must be referenced only once.
    </model>
    <remarks>
        <p>Implemented requirements within a component or capability in a component definition provide a means for component suppliers to suggest possible control implementation details, which may be used by a different party (e.g., component consumers) when authoring a system security plan. Thus, these requirements defined in a component definition are only a suggestion of how to implement, which may be adopted wholesale, changed, or ignored by a person defining an information system implementation.</p>
        <p>Use of <code>set-parameter</code> in this context, sets the parameter for the referenced control and any associated statements.</p>
    </remarks>
</define-assembly> {"implemented-requirement"}


<define-assembly>"statement"            // Control Statement Implementation: Identifies which statements within a control are addressed.
    <flag>statement-id : string       // A reference to the specific implemented statement associated with a control.
    <define-flag>uuid  : uuid         // Machine readable universal identifier
    <model>
    </model>
        <define-field>description : multiline-markup  // Statement Implementation Description: A summary of how the containing control statement is implemented by the component or capability.
        <assembly>props : ArrayOf(property)
        <assembly>links : ArrayOf(link)
        <assembly>responsible-roles : ArrayOf(responsible-role)
        <field>remarks : string
        <constraint>Since responsible-role associates multiple party-uuid entries with a single role-id, each role-id must be referenced only once.
</define-assembly> {"statement"}


